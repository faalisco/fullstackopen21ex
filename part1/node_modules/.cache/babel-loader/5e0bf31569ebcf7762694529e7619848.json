{"ast":null,"code":"var _jsxFileName = \"/home/alhafithsidik/code/fullstackopen21ex/part1/src/App.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Note = ({\n  note\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: note.content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Note;\n\nconst App = ({\n  notes\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notes.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note.content\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 16\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 7\n  }, this);\n}; //Event Handling Revisited\n// const App = () => {\n//   const [value, setValue] = useState(10)\n//   const setToValue = (newValue) => setValue(newValue)\n//   return (\n//     <div>\n//       {value}\n//       <button onClick={() => setToValue(1000)}>\n//         thousand\n//       </button>\n//       <button onClick={() => setToValue(0)}>\n//         reset\n//       </button>\n//       <button onClick={() => setToValue(value + 1)}>\n//         increment\n//       </button>\n//     </div>\n//   )\n// }\n// //conditional rendering\n// const History = (props) =>{\n//   if (props.allClicks.length === 0){\n//     return (\n//       <div>\n//         The app is used by pressing the buttons\n//       </div>\n//     )\n//   }\n//   return (\n//     <div>\n//       button press history: {props.allClicks.join(' ')}\n//     </div>\n//   )\n// }\n// const Button = ({handleClick, text}) => (\n//     <button onClick={handleClick}>\n//     {text}\n//   </button>\n// )\n// //rendering arrays\n// const App = () =>{\n//   const [left, setLeft] = useState(0)\n//   const [right, setRight] = useState(0)\n//   const [allClicks, setAll] = useState([])\n//   const handleLeftClick = () => {\n//     setAll(allClicks.concat('L'))\n//     setLeft(left + 1)\n//   }\n//   const handleRightClick = () => {\n//     setAll(allClicks.concat('R'))\n//     setRight(right + 1)\n//   }\n//   return (\n//     <div>\n//       {left}\n//       <Button handleClick={handleLeftClick} text='left' />\n//       <Button handleClick={handleRightClick} text='right' />\n//       {right}\n//       <History allClicks={allClicks} />\n//     </div>\n//   )\n// }\n// ///complex states\n// const App = () => {\n//   const [clicks, setClicks] = useState({\n//     left: 0,\n//     right: 0\n//   })\n//   const handleLeftClick = () => setClicks({\n//       ...clicks,\n//       left: clicks.left + 1\n//     })\n//   const handleRightClick = () =>\n//     setClicks({\n//       ...clicks,\n//       right: clicks.right + 1\n//     })\n//   return(\n//     <div>\n//       {clicks.left}\n//       <button onClick={handleLeftClick}>left</button>\n//       <button onClick={handleRightClick}>right</button>\n//       {clicks.right}\n//     </div>\n//   )\n// }\n// const Display = ({counter}) => <div>{counter}</div>\n// const Button = ({handleClick, text}) =>{\n//   return(\n//     <button onClick={handleClick}>\n//       {text}\n//     </button>\n//   )\n// }\n// const App = () => {\n//   const [counter, setCounter] = useState(0)\n//   const increaseByOne = () => setCounter(counter + 1)\n//   const decreaseByOne = () => setCounter(counter - 1)\n//   const setToZero = () => setCounter(0)\n//   /// complex states\n//   const {left, setLeft} = useState(0)\n//   const {right, setRight} = useState(0)\n//   return (\n//     <div>\n//       {left}\n//       <button onClick={() => setLeft(left + 1)}>\n//         left\n//       </button>\n//       <button onClick={() => setRight(right + 1)}>\n//         right\n//       </button>\n//       {right}\n//       <Display counter={counter} />\n//       <Button\n//         handleClick={increaseByOne}\n//         text='plus'\n//       />\n//       <Button \n//         handleClick={setToZero}\n//         text='zero'\n//       />\n//       <Button \n//         handleClick={decreaseByOne}\n//         text='minus'\n//       />\n//     </div>\n//   )\n// }\n// const Footer = () => {\n//   return (\n//     <div>\n//       greatings app created by <a href=\"https://github.com/faalisco\">faalisco</a>\n//     </div>\n//   )\n// }\n// const Hello = ({name, age}) => {\n//   const bornYear = () => new Date().getFullYear() - age\n//   return (\n//     <div>\n//       <p>\n//         Hello {name}, you are {age} years old\n//       </p>\n//       <p>So you were probally born in {bornYear()} </p>\n//     </div>\n//  )\n// }\n// const App = () =>{\n//   const name = 'Lamin'\n//   const age = '23'\n//  return (\n//   <>\n//     <h1>Greetings</h1>\n//     <Hello name=\"Maya\" age={26+10} />\n//     <Hello name={name} age={age} />\n//     <Footer />\n//   </>\n//  )\n// }\n\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Note\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/home/alhafithsidik/code/fullstackopen21ex/part1/src/App.js"],"names":["React","useState","Note","note","content","App","notes","map","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAGA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACxB,sBACG;AAAA,cAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,UADH;AAGF,CAJD;;KAAMF,I;;AAMN,MAAMG,GAAG,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAExB,sBACG;AAAA,4BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,eAEG;AAAA,gBACIA,KAAK,CAACC,GAAN,CAAUJ,IAAI,iBACZ,QAAC,IAAD;AAAoB,QAAA,IAAI,EAAEA,IAAI,CAACC;AAA/B,SAAWD,IAAI,CAACK,EAAhB;AAAA;AAAA;AAAA;AAAA,cADF;AADJ;AAAA;AAAA;AAAA;AAAA,YAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAWF,CAbD,C,CAkDA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA4BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA0BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MA9UMH,G;AAgVN,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\"\n\n\nconst Note = ({ note }) => {\n   return (\n      <li>{note.content}</li>\n   )\n}\n\nconst App = ({ notes }) => {\n\n   return (\n      <div>\n         <h1>Notes</h1>\n         <ul>\n            {notes.map(note =>\n               <Note key={note.id} note={note.content} />\n            )}\n         </ul>\n      </div>\n\n   )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//Event Handling Revisited\n// const App = () => {\n//   const [value, setValue] = useState(10)\n\n\n\n//   const setToValue = (newValue) => setValue(newValue)\n\n//   return (\n//     <div>\n//       {value}\n//       <button onClick={() => setToValue(1000)}>\n//         thousand\n//       </button>\n//       <button onClick={() => setToValue(0)}>\n//         reset\n//       </button>\n//       <button onClick={() => setToValue(value + 1)}>\n//         increment\n//       </button>\n//     </div>\n//   )\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// //conditional rendering\n// const History = (props) =>{\n//   if (props.allClicks.length === 0){\n//     return (\n//       <div>\n//         The app is used by pressing the buttons\n//       </div>\n//     )\n//   }\n//   return (\n//     <div>\n//       button press history: {props.allClicks.join(' ')}\n//     </div>\n//   )\n// }\n\n// const Button = ({handleClick, text}) => (\n//     <button onClick={handleClick}>\n//     {text}\n//   </button>\n// )\n\n// //rendering arrays\n// const App = () =>{\n//   const [left, setLeft] = useState(0)\n//   const [right, setRight] = useState(0)\n//   const [allClicks, setAll] = useState([])\n\n//   const handleLeftClick = () => {\n//     setAll(allClicks.concat('L'))\n//     setLeft(left + 1)\n//   }\n\n\n//   const handleRightClick = () => {\n//     setAll(allClicks.concat('R'))\n//     setRight(right + 1)\n//   }\n\n\n//   return (\n//     <div>\n//       {left}\n//       <Button handleClick={handleLeftClick} text='left' />\n//       <Button handleClick={handleRightClick} text='right' />\n//       {right}\n//       <History allClicks={allClicks} />\n//     </div>\n//   )\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ///complex states\n// const App = () => {\n//   const [clicks, setClicks] = useState({\n//     left: 0,\n//     right: 0\n//   })\n\n//   const handleLeftClick = () => setClicks({\n//       ...clicks,\n//       left: clicks.left + 1\n//     })\n\n//   const handleRightClick = () =>\n//     setClicks({\n//       ...clicks,\n//       right: clicks.right + 1\n//     })\n//   return(\n//     <div>\n//       {clicks.left}\n//       <button onClick={handleLeftClick}>left</button>\n//       <button onClick={handleRightClick}>right</button>\n//       {clicks.right}\n\n//     </div>\n//   )\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const Display = ({counter}) => <div>{counter}</div>\n\n// const Button = ({handleClick, text}) =>{\n//   return(\n//     <button onClick={handleClick}>\n//       {text}\n//     </button>\n//   )\n// }\n\n\n\n// const App = () => {\n//   const [counter, setCounter] = useState(0)\n\n//   const increaseByOne = () => setCounter(counter + 1)\n//   const decreaseByOne = () => setCounter(counter - 1)\n//   const setToZero = () => setCounter(0)\n\n//   /// complex states\n//   const {left, setLeft} = useState(0)\n//   const {right, setRight} = useState(0)\n\n//   return (\n//     <div>\n\n//       {left}\n//       <button onClick={() => setLeft(left + 1)}>\n//         left\n//       </button>\n\n//       <button onClick={() => setRight(right + 1)}>\n//         right\n//       </button>\n//       {right}\n\n//       <Display counter={counter} />\n\n//       <Button\n//         handleClick={increaseByOne}\n//         text='plus'\n//       />\n\n//       <Button \n//         handleClick={setToZero}\n//         text='zero'\n//       />\n\n//       <Button \n//         handleClick={decreaseByOne}\n//         text='minus'\n//       />\n\n//     </div>\n\n//   )\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const Footer = () => {\n//   return (\n//     <div>\n//       greatings app created by <a href=\"https://github.com/faalisco\">faalisco</a>\n//     </div>\n//   )\n// }\n\n// const Hello = ({name, age}) => {\n//   const bornYear = () => new Date().getFullYear() - age\n//   return (\n//     <div>\n//       <p>\n//         Hello {name}, you are {age} years old\n//       </p>\n//       <p>So you were probally born in {bornYear()} </p>\n//     </div>\n//  )\n// }\n\n// const App = () =>{\n//   const name = 'Lamin'\n//   const age = '23'\n//  return (\n//   <>\n//     <h1>Greetings</h1>\n//     <Hello name=\"Maya\" age={26+10} />\n//     <Hello name={name} age={age} />\n//     <Footer />\n//   </>\n//  )\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}